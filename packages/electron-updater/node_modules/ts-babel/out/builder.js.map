{"version":3,"file":"builder.js","sourceRoot":"","sources":["../src/builder.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nrequire(\"v8-compile-cache\")\n\nimport * as ts from \"typescript\"\nimport * as path from \"path\"\nimport * as babel from \"@babel/core\"\nimport { readdir, ensureDir, unlink, outputFile, outputJson } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { transpile, checkErrors } from \"./util\"\n\ntranspile(async (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => {\n  const compilerOptions = config.options\n  if (tsConfig.declaration !== false) {\n    compilerOptions.declaration = true\n  }\n\n  compilerOptions.noEmitOnError = true\n\n  const program = ts.createProgram(config.fileNames, compilerOptions, ts.createCompilerHost(compilerOptions))\n  checkErrors(ts.getPreEmitDiagnostics(program))\n\n  const compilerOutDir = path.resolve(program.getCurrentDirectory(), compilerOptions.outDir!!)\n  if (compilerOutDir == null) {\n    throw new Error(\"outDir is not specified in the compilerOptions\")\n  }\n\n  await ensureDir(compilerOutDir)\n\n  const fileToSourceMap: any = {}\n  const promises: Array<Promise<any>> = []\n  const emittedFiles = new Set<string>()\n  const currentDirectory = program.getCurrentDirectory()\n  const emitResult = program.emit(undefined, (fileName, data) => {\n    const file = path.resolve(currentDirectory, fileName)\n    emittedFiles.add(file)\n\n    if (file.endsWith(\".js\")) {\n      const sourceMapFileName = `${file}.map`\n      processCompiled(data, fileToSourceMap[sourceMapFileName], file, sourceMapFileName, promises, currentDirectory)\n    }\n    else if (file.endsWith(\".js.map\")) {\n      fileToSourceMap[file] = data\n    }\n    else {\n      promises.push(outputFile(file, data))\n    }\n  })\n\n  checkErrors(emitResult.diagnostics)\n  if (emitResult.emitSkipped) {\n    throw new Error(\"Emit skipped\")\n  }\n\n  await Promise.all(promises)\n  await removeOld(compilerOutDir, emittedFiles)\n})\n  .catch(error => {\n    console.error(error.stack || error.message || error)\n    // noinspection TypeScriptValidateJSTypes\n    process.exit(-1)\n  })\n\nasync function removeOld(outDir: string, emittedFiles: Set<string>): Promise<any> {\n  await BluebirdPromise.map(await readdir(outDir), file => {\n    const fullPath = path.resolve(outDir, file)\n    if (!file.includes(\".\")) {\n      return removeOld(fullPath, emittedFiles)\n    }\n\n    if ((file.endsWith(\".js\") || file.endsWith(\".js.map\") || file.endsWith(\".d.ts\")) && !emittedFiles.has(fullPath)) {\n      return unlink(fullPath)\n    }\n    return null\n  })\n}\n\nfunction processCompiled(code: string, sourceMap: string, jsFile: string, sourceMapFileName: string, promises: Array<Promise<any>>, currentDirectory: string) {\n  const options: any = {\n    inputSourceMap: sourceMap == null ? null : JSON.parse(sourceMap),\n    sourceMaps: true,\n    filename: jsFile,\n    root: currentDirectory,\n  }\n  const result = babel.transform(code, options)\n\n  const match = code.match(regex)!!\n  const sourceMapUrl = match[1] || match[2]\n\n  // add marker, so, babel-jest can easily detect is file required to be processed or not (maybe processed by IDE TS compiler)\n  promises.push(\n    outputFile(jsFile, result.code.replace(regex, \"\") + `\\n// __ts-babel@6.0.4` + `\\n//# sourceMappingURL=${sourceMapUrl}`),\n    outputJson(sourceMapFileName, result.map))\n}\n\nconst innerRegex = /[#@] sourceMappingURL=([^\\s'\"]*)/\nconst regex = RegExp(\n  \"(?:\" +\n  \"/\\\\*\" +\n  \"(?:\\\\s*\\r?\\n(?://)?)?\" +\n  \"(?:\" + innerRegex.source + \")\" +\n  \"\\\\s*\" +\n  \"\\\\*/\" +\n  \"|\" +\n  \"//(?:\" + innerRegex.source + \")\" +\n  \")\" +\n  \"\\\\s*\"\n)"]}