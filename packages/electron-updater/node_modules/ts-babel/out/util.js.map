{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\"\nimport * as path from \"path\"\nimport { readFile, readdir, stat, readJson } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { topologicallyBatchPackages } from \"./PackageGraph\"\n\nconst globSuffix = \"/*\"\n\nexport async function transpile(transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const paths = process.argv.slice(2)\n  if (paths.length == 0) {\n    paths.push(process.cwd())\n  }\n\n  if (paths[0].endsWith(globSuffix)) {\n    const packageDir = paths[0].substring(0, paths[0].length - 2)\n    const packageMetadata = await readProjectMetadata(packageDir)\n    const toCompile = topologicallyBatchPackages(packageMetadata)\n    await BluebirdPromise.mapSeries(toCompile, it => {\n      console.log(`Building ${it.map(it => it.name).join(\", \")}`)\n      return transpilePaths(it.map(it => path.join(packageDir, it.name)), transpilator, false)\n    })\n  }\n  await transpilePaths(paths.filter(it => !it.endsWith(globSuffix)), transpilator, true)\n}\n\nexport async function readProjectMetadata(packageDir: string) {\n  const packageDirs = BluebirdPromise.filter((await readdir(packageDir)).filter(it => !it.includes(\".\")).sort(), it => {\n    return stat(path.join(packageDir, it, \"tsconfig.json\"))\n      .then(it => it.isFile())\n      .catch(() => false)\n  })\n  return await BluebirdPromise.map(packageDirs, it => readJson(path.join(packageDir, it, \"package.json\")), {concurrency: 8})\n}\n\nasync function transpilePaths(paths: Array<string>, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>, isLogBuilding: boolean) {\n  for (const basePath of paths) {\n    if (isLogBuilding) {\n      console.log(`Building ${basePath}`)\n    }\n\n    try {\n      await build(basePath, transpilator)\n    }\n    catch (e) {\n      if (!(e instanceof CompilationError)) {\n        throw e\n      }\n\n      for (const diagnostic of e.errors) {\n        if (diagnostic.file == null) {\n          console.log(diagnostic.messageText)\n          continue\n        }\n\n        const location = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!!)\n        const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n        console.log(`${diagnostic.file.fileName} (${location.line + 1}, ${location.character + 1}): ${message}`)\n      }\n      process.exit(-1)\n      return\n    }\n  }\n}\n\nasync function build(basePath: string, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const tsConfigPath = path.join(basePath, \"tsconfig.json\")\n  const jsonResult = ts.parseConfigFileTextToJson(tsConfigPath, await readFile(tsConfigPath, \"utf8\"))\n  if (jsonResult.error != null) {\n    throw new CompilationError([jsonResult.error])\n  }\n\n  const result = ts.parseJsonConfigFileContent(jsonResult.config, ts.sys, basePath)\n  checkErrors(result.errors)\n\n  await transpilator(basePath, result, jsonResult.config)\n}\n\nexport function checkErrors(errors: ReadonlyArray<ts.Diagnostic>): void {\n  if (errors.length !== 0) {\n    throw new CompilationError(errors)\n  }\n}\n\nclass CompilationError extends Error {\n  constructor(public errors: ReadonlyArray<ts.Diagnostic>) {\n    super(\"Compilation error\")\n  }\n}"]}