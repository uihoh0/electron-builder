{"version":3,"file":"zip.js","sourceRoot":"","sources":["../../src/differentialUpdate/zip.ts"],"names":[],"mappings":"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","sourcesContent":["export const eocdrWithoutCommentSize = 22\n\nexport function readCentralDirectoryEntry(buffer: Buffer): ZipFileReader {\n  for (let i = buffer.length - eocdrWithoutCommentSize; i >= 0; i--) {\n    if (buffer.readUInt32LE(i) !== 0x06054b50) {\n      continue\n    }\n\n    // found eocdr\n    const eocdrBuffer = buffer.slice(i)\n\n    // 0 - End of central directory signature = 0x06054b50\n    // 4 - Number of this disk\n    const diskNumber = eocdrBuffer.readUInt16LE(4)\n    if (diskNumber !== 0) {\n      throw new Error(`Multi-disk zip files are not supported: found disk number: ${diskNumber}`)\n    }\n\n    // 6 - Disk where central directory starts\n    // 8 - Number of central directory records on this disk\n    // 10 - Total number of central directory records\n    const entryCount = eocdrBuffer.readUInt16LE(10)\n    // 12 - Size of central directory (bytes)\n    const centralDirectorySize = eocdrBuffer.readUInt32LE(12)\n    // 16 - Offset of start of central directory, relative to start of archive\n    const centralDirectoryOffset = eocdrBuffer.readUInt32LE(16)\n\n    const commentLength = eocdrBuffer.readUInt16LE(20)\n    if (commentLength > 0) {\n      throw new Error(`Zip file must not have comment (commentLength: ${commentLength})`)\n    }\n\n    return new ZipFileReader(centralDirectoryOffset, centralDirectorySize, entryCount)\n  }\n\n  throw new Error(\"end of central directory record signature not found\")\n}\n\nexport class ZipFileReader {\n  private readEntryCursor = 0\n\n  constructor(readonly centralDirectoryOffset: number, readonly centralDirectorySize: number, readonly entryCount: number) {\n  }\n\n  readEntries(buffer: Buffer) {\n    this.readEntryCursor = 0\n\n    const entries = new Array<Entry>(this.entryCount)\n    for (let i = 0; i < this.entryCount; i++) {\n      entries[i] = this.readEntry(buffer)\n    }\n    return entries\n  }\n\n  readEntry(buffer: Buffer): Entry {\n    const entry = new Entry()\n    // 0 - Central directory file header signature\n    const signature = buffer.readUInt32LE(this.readEntryCursor)\n    if (signature !== 0x02014b50) {\n      throw new Error(`invalid central directory file header signature: 0x${signature.toString(16)}`)\n    }\n\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(this.readEntryCursor + 4)\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(this.readEntryCursor + 6)\n    // 8 - General purpose bit flag\n    const generalPurposeBitFlag = buffer.readUInt16LE(this.readEntryCursor + 8)\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(this.readEntryCursor + 10)\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(this.readEntryCursor + 12)\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(this.readEntryCursor + 14)\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(this.readEntryCursor + 16)\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(this.readEntryCursor + 20)\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(this.readEntryCursor + 24)\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(this.readEntryCursor + 28)\n\n    // 30 - Extra field length (m)\n    const extraFieldLength = buffer.readUInt16LE(this.readEntryCursor + 30)\n    if (extraFieldLength > 0) {\n      throw new Error(\"Must be no extra fields\")\n    }\n\n    // 32 - File comment length (k)\n    const fileCommentLength = buffer.readUInt16LE(this.readEntryCursor + 32)\n    if (fileCommentLength > 0) {\n      throw new Error(\"Must be no file comment\")\n    }\n\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(this.readEntryCursor + 36)\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(this.readEntryCursor + 38)\n    // 42 - Relative offset of local file header\n    entry.offset = buffer.readUInt32LE(this.readEntryCursor + 42)\n\n    if (generalPurposeBitFlag & 0x40) {\n      throw new Error(\"strong encryption is not supported\")\n    }\n\n    this.readEntryCursor += 46\n    const entryDataSize = entry.fileNameLength\n    buffer = buffer.slice(this.readEntryCursor, this.readEntryCursor + entryDataSize)\n    this.readEntryCursor += entryDataSize\n\n    // 46 - File name\n    const isUtf8 = (generalPurposeBitFlag & 0x800) !== 0\n    entry.fileName = decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8)\n\n    entry.dataStart = entry.offset + 30 + entry.fileNameLength\n    return entry\n  }\n}\n\nexport class Entry {\n  offset: number\n  dataStart: number\n\n  get dataEnd() {\n    return this.dataStart + this.compressedSize\n  }\n\n  compressionMethod: number\n  lastModFileDate: number\n  lastModFileTime: number\n\n  versionMadeBy: number\n  versionNeededToExtract: number\n  crc32: number\n\n  fileName: string\n  compressedSize: number\n  uncompressedSize: number\n  fileNameLength: number\n\n  internalFileAttributes: number\n  externalFileAttributes: number\n}\n\nconst cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '\n\nfunction decodeBuffer(buffer: Buffer, start: number, end: number, isUtf8: boolean) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end)\n  }\n\n  let result = \"\"\n  for (let i = start; i < end; i++) {\n    result += cp437[buffer[i]]\n  }\n  return result\n}\n"]}
